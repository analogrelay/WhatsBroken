// **********************************************************
// Dumps a list of quarantined tests in the most recent build
// **********************************************************

declare query_parameters(Repositories: string = "dotnet/aspnetcore;dotnet-aspnetcore", Branches:string = "refs/heads/master");

let repositories = datatable (A: string) [""] | extend Repos = split(Repositories, ";") | mv-expand Repos | project Repos;
let branchFilter = datatable (A: string) [""] | extend Branches = split(Branches, ";") | mv-expand Branches | where not(isempty(Branches)) | project Branches;

let mostRecentBuild = Jobs
| where Repository in (repositories) and ((toscalar(branchFilter | count) == 0) or Branch in (branchFilter))
| extend ParsedProps = parse_json(Properties)
| extend BuildNumber = tostring(ParsedProps.buildNumber), BuildDefinition = tostring(ParsedProps.buildDefinition), RunType = tostring(ParsedProps.runType)
| where RunType == "quarantined" and not(isempty(BuildNumber))
| top 1 by Finished desc
| project BuildNumber, BuildDefinition;

Jobs
| where Repository in (repositories) and ((toscalar(branchFilter | count) == 0) or Branch in (branchFilter))
| extend ParsedProps = parse_json(Properties)
| extend BuildNumber = tostring(ParsedProps.buildNumber), BuildDefinition = tostring(ParsedProps.buildDefinition)
| join kind = inner (mostRecentBuild) on BuildDefinition, BuildNumber
| join kind = inner (WorkItems) on JobId
| join kind = inner (TestResults) on WorkItemId
| where (Traits contains "Flaky") or (Traits contains "Quarantine")
| extend NameSegments = split(WorkItemFriendlyName, "--")
| extend Project = tostring(NameSegments[0]), Framework = tostring(NameSegments[1])
| distinct Project, Type1, Method, Arguments, ArgumentHash
| project-rename Type = Type1
| sort by Project, Type, Method, Arguments, ArgumentHash