// **********************************************************
// Dumps a list of quarantined tests in the most recent build
// **********************************************************

declare query_parameters(Repositories: string = "dotnet/aspnetcore;dotnet-aspnetcore", Branches:string = "refs/heads/master");

let repositories = datatable (A: string) [""] | extend Repos = split(Repositories, ";") | mv-expand Repos | project Repos;
let branchFilter = datatable (A: string) [""] | extend Branches = split(Branches, ";") | mv-expand Branches | where not(isempty(Branches)) | project Branches;

let start = startofday(now(), -30);
let end = now();

let mostRecentBuilds = materialize(Jobs
| where Repository in ("dotnet/aspnetcore", "dotnet-aspnetcore") and Branch == "refs/heads/master" and Finished between (start..end)
| extend ParsedProps = parse_json(Properties)
| extend BuildNumber = tostring(ParsedProps.buildNumber), BuildDefinition = tostring(ParsedProps.buildDefinition), RunType = tostring(ParsedProps.runType)
| where RunType == "quarantined" and not(isempty(BuildNumber))
| project JobId, Finished, BuildNumber, BuildDefinition);

let quarantinedTests = materialize(mostRecentBuilds
| top 1 by Finished desc
| join kind = inner (WorkItems) on JobId
| project WorkItemId
| join kind = inner (TestResults) on WorkItemId
| project Result, WorkItemFriendlyName, Traits, Type, Method, Arguments, ArgumentHash
| where (Result != "Skip") and ((Traits contains "Flaky") or (Traits contains "Quarantine"))
| extend NameSegments = split(WorkItemFriendlyName, "--")
| extend Project = tostring(NameSegments[0]), Framework = tostring(NameSegments[1]));

mostRecentBuilds
| join kind = inner (WorkItems) on JobId
| join kind = inner (TestResults) on WorkItemId
| join kind = inner (quarantinedTests) on WorkItemFriendlyName, Type, Method, ArgumentHash
| extend NameSegments = split(WorkItemFriendlyName, "--")
| extend Project = tostring(NameSegments[0]), Framework = tostring(NameSegments[1])
| summarize 
    PassingRuns = countif(Result == "Pass"), 
    FailingRuns = countif(Result == "Fail"),
    SkippedRuns = countif(Result == "Skip"),
    TotalRuns = count(),
    FirstRun = min(Finished),
    LastRun = max(Finished),
    FirstFailure = minif(Finished, Result == "Fail"),
    LastFailure = maxif(Finished, Result == "Fail")
    by Project, Type, Method, Arguments, ArgumentHash
| extend PassingRate = todouble(PassingRuns) / todouble(TotalRuns - SkippedRuns)
| sort by PassingRate asc, FirstRun desc

