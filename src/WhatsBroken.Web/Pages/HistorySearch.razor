@page "/history"
@inject BackgroundDataStore BackgroundData

@using System.Net

<h1>Find run history for a test</h1>

<LoadingPanel IsVisible="@(!TestCollectionHasLoaded)" />

<div hidden="@(!TestCollectionHasLoaded)">
    @if (!string.IsNullOrEmpty(Alert))
    {
        <div class="alert alert-danger" role="alert">
            @Alert
        </div>
    }
    else
    {
        <form>
            @if (Collection != null)
            {
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span id="projectLabel" class="input-group-text">Project</span>
                        </div>
                        <select id="projectDropdown" aria-describedby="projectLabel" @onchange="ProjectSelectionChanged">
                            <option selected>Choose a project...</option>
                            @foreach (var project in Collection!.Projects.Values.OrderBy(v => v.Name))
                            {
                                <option value="@project.Name">@project.Name</option>
                            }
                        </select>
                    </div>
                </div>
            }
            @if (SelectedProject != null)
            {
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span id="typeLabel" class="input-group-text">Type</span>
                        </div>
                        <select id="typeDropdown" aria-describedby="typeLabel" @onchange="TypeSelectionChanged">
                            <option selected>Choose a type...</option>
                            @foreach (var type in SelectedProject!.Types.Values.OrderBy(v => v.Name))
                            {
                                <option value="@type.Name">@type.Name</option>
                            }
                        </select>
                    </div>
                </div>
            }

            @if (SelectedType != null)
            {
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span id="methodLabel" class="input-group-text">Method</span>
                        </div>
                        <select id="methodDropdown" aria-describedby="methodLabel" @onchange="MethodSelectionChanged">
                            <option selected>Choose a method...</option>
                            @foreach (var type in SelectedType!.Methods.Values.OrderBy(v => v.Name))
                            {
                                <option value="@type.Name">@type.Name</option>
                            }
                        </select>
                    </div>
                </div>
            }
            @if (SelectedMethod != null && SelectedMethod.Cases.Count > 1)
            {
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span id="argumentsLabel" class="input-group-text">Arguments</span>
                        </div>
                        <select id="argumentsDropdown" aria-describedby="argumentsLabel" @onchange="CaseSelectionChanged">
                            <option selected>Choose a test case...</option>
                            @foreach (var testCase in SelectedMethod!.Cases.Values.OrderBy(v => v.ArgumentHash))
                            {
                                <option value="@testCase.ArgumentHash">@testCase.Arguments</option>
                            }
                        </select>
                    </div>
                </div>
            }

            <a href="@GetHistoryLink(SelectedCase)" class="btn btn-primary @(SelectedCase == null ? "disabled" : null)">Get History...</a>
        </form>
    }
</div>

@code {
    TestCollection? Collection { get; set; }
    TestProject? SelectedProject { get; set; }
    TestType? SelectedType { get; set; }
    TestMethod? SelectedMethod { get; set; }
    TestCase? SelectedCase { get; set; }
    string? Alert { get; set; }

    bool TestCollectionHasLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await BackgroundData.TestCollectionLoaded;
        TestCollectionHasLoaded = true;
        Collection = BackgroundData.GetTestCollection();
        if (Collection.AllTests.Count == 0)
        {
            Alert = "The test list has not been loaded yet (it loads in the background). Please refresh this page in a minute or so.";
        }
    }

    string GetHistoryLink(TestCase? testCase)
    {
        if (testCase == null)
        {
            return "#";
        }

        var encodedHash = string.IsNullOrEmpty(testCase.ArgumentHash) ? null : WebUtility.UrlEncode(testCase.ArgumentHash);
        var methodAndArgs = string.IsNullOrEmpty(encodedHash) ? testCase.Method : $"{testCase.Method}/{encodedHash}";
        return $"/history/{testCase.Project}/{testCase.Type}/{methodAndArgs}";
    }

    void ProjectSelectionChanged(ChangeEventArgs args)
    {
        var key = args.Value?.ToString();
        if (string.IsNullOrEmpty(key))
        {
            SelectedProject = null;
            SelectedType = null;
            SelectedMethod = null;
            SelectedCase = null;
        }
        else if (Collection != null && Collection.Projects.TryGetValue(key, out var project))
        {
            SelectedProject = project;
            SelectedType = project.Types.Count == 1 ? project.Types.Values.First() : null;
            SelectedMethod = SelectedType?.Methods.Count == 1 ? SelectedType.Methods.Values.First() : null;
            SelectedCase = SelectedMethod?.Cases.Count == 1 ? SelectedMethod.Cases.Values.First() : null;
        }
        else
        {
            Alert = "An internal error occurred! Try refreshing the page.";
        }
    }

    void TypeSelectionChanged(ChangeEventArgs args)
    {
        var key = args.Value?.ToString();
        if (string.IsNullOrEmpty(key))
        {
            SelectedType = null;
            SelectedMethod = null;
            SelectedCase = null;
        }
        else if (SelectedProject != null && SelectedProject.Types.TryGetValue(key, out var type))
        {
            SelectedType = type;
            SelectedMethod = SelectedType?.Methods.Count == 1 ? SelectedType.Methods.Values.First() : null;
            SelectedCase = SelectedMethod?.Cases.Count == 1 ? SelectedMethod.Cases.Values.First() : null;
        }
        else
        {
            Alert = "An internal error occurred! Try refreshing the page.";
        }

    }

    void MethodSelectionChanged(ChangeEventArgs args)
    {
        var key = args.Value?.ToString();
        if (string.IsNullOrEmpty(key))
        {
            SelectedMethod = null;
            SelectedCase = null;
        }
        else if (SelectedType != null && SelectedType.Methods.TryGetValue(key, out var method))
        {
            SelectedMethod = method;
            SelectedCase = SelectedMethod?.Cases.Count == 1 ? SelectedMethod.Cases.Values.First() : null;
        }
        else
        {
            Alert = "An internal error occurred! Try refreshing the page.";
        }
    }

    void CaseSelectionChanged(ChangeEventArgs args)
    {
        var key = args.Value?.ToString();
        if (string.IsNullOrEmpty(key))
        {
            SelectedCase = null;
        }
        else if (SelectedMethod != null && SelectedMethod.Cases.TryGetValue(key, out var testCase))
        {
            SelectedCase = testCase;
        }
        else
        {
            Alert = "An internal error occurred! Try refreshing the page.";
        }
    }
}
