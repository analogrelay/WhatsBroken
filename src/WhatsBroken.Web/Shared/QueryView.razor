@typeparam TResult
@inject KustoContextFactory KustoContextFactory

<div class="pt-3 clearfix">
    <div class="mb-3 datagrid-tools-panel">
        @ToolsPanel
        <BSButton OnClick="@(_ => ReloadAsync(isReload: true))" IsOutline="true" Color="Color.Info">Refresh</BSButton>
        <BSButton Id="openLegendButton" OnClick="@(_ => LegendIsOpen = !LegendIsOpen)" IsOutline="true" Color="Color.Info">Legend</BSButton>
        <BSPopover Target="openLegendButton" IsOpen="@LegendIsOpen" Placement="Placement.Left">
            <BSPopoverHeader>Legend</BSPopoverHeader>
            <BSPopoverBody>
                <p>Symbols:</p>
                <ul>
                    <li>✔ - The test passed.</li>
                    <li>❌ - The test failed.</li>
                    <li>➖ - The test was skipped.</li>
                    <li>☢ - The test is quarantined.</li>
                    <li><span class="icofont-external-link"></span> - Link opens in a new window.</li>
                    <li><span class="icofont-eye"></span> - The test failed in the public build.</li>
                    <li><span class="icofont-eye-blocked"></span> - The test failed in the internal build.</li>
                    <li><span class="icofont-question-circle"></span> - The build definition for this failure is unknown.</li>
                </ul>
                <p>Formatting:</p>
                <ul>
                    <li><em>Italics</em> indicate quarantined tests.</li>
                </ul>
                <p>Abbreviated namespaces:</p>
                <ul>
                    @foreach (var (name, abbrev) in NamespaceAbbreviations)
                    {
                        <li><code>@abbrev</code> - <code>@name</code></li>
                    }
                </ul>
                <p>The full type name is available by hovering over it.</p>
            </BSPopoverBody>
        </BSPopover>
    </div>

    <h1 title="@HeaderTitle">@HeaderContent</h1>
     <LoadingPanel IsVisible="@_isLoading">
         <LoadingContent>
             @LoadingContent
         </LoadingContent>
     </LoadingPanel>
</div>

<div class="pt-2">
    <div class="query-view-host">
        <div class="query-view-container">
            @if (_results?.Count > 0)
            {
                @ChildContent?.Invoke(_results)
            }
            else if (NoResultsTemplate != null)
            {
                @NoResultsTemplate
            }
            else if(!_firstLoadComplete)
            {
                <span>Loading...</span>
            }
            else
            {
                <span>No results!</span>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment? ToolsPanel { get; set; }

    [Parameter]
    public string? HeaderTitle { get; set; }

    [Parameter]
    public RenderFragment? LoadingContent { get; set; }

    [Parameter]
    public RenderFragment? HeaderContent { get; set; }

    [Parameter]
    public RenderFragment? NoResultsTemplate { get; set; }

    [Parameter]
    public RenderFragment<IReadOnlyList<TResult>?>? ChildContent { get; set; }

    [Parameter]
    public EventCallback<LoadDataEventArgs> OnLoadData { get; set; }

    bool LegendIsOpen { get; set; }

    // We know Blazor will call our initialization code before we can dereference this.
    KustoContext _context = default!;
    bool _isLoading;
    bool _firstLoadComplete;
    IReadOnlyList<TResult> _results = Array.Empty<TResult>();

    protected override async Task OnInitializedAsync()
    {
        _context = await KustoContextFactory.CreateContextAsync();
        await ReloadAsync(isReload: false);
    }

    async Task ReloadAsync(bool isReload)
    {
        _isLoading = true;
        var args = new LoadDataEventArgs(_context, isReload);
        await OnLoadData.InvokeAsync(args);
        _firstLoadComplete = true;
        _results = args.Results;
        _isLoading = false;
    }

    public class LoadDataEventArgs
    {
        public bool IsRefresh { get; }
        public KustoContext Context { get; }
        public IReadOnlyList<TResult> Results { get; set; } = Array.Empty<TResult>();

        public LoadDataEventArgs(KustoContext context, bool isRefresh)
        {
            Context = context;
            IsRefresh = isRefresh;
        }
    }
}
