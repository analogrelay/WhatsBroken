@inject BackgroundDataStore QuarantineTracker

@if (Results is object)
{
    <table class="table table-sm table-responsive table-striped table-datagrid">
        <thead>
            <tr>
                <th scope="col"><span class="sr-only">Expand for more details</span></th>
                <th scope="col"><span class="sr-only">Status</span></th>
                <th scope="col">Date</th>
                <th scope="col">Project</th>
                <th scope="col">Type</th>
                <th scope="col">Method</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (result, state) in _rows)
            {
                <tr class="@GetRowClasses(result)">
                    <td>
                        <a @onclick="@(_ => state.ToggleExpanded())">
                            <span class="oi @(state.IsExpanded ? "icofont-rounded-down" : "icofont-rounded-right")"></span>
                        </a>
                    </td>
                    <td>
                        @switch (result.Result)
                        {
                            case "Skip":
                                <span title="Skipped" class="symbol">➖</span>
                                break;
                            case "Fail":
                                <span title="Failed" class="symbol">❌</span>
                                break;
                            default:
                                <span title="Passed" class="symbol">✔</span>
                                break;
                        }

                        @if(result.BuildDefinition == "aspnetcore-ci")
                        {
                            <span title="Public Build" class="icofont-eye"></span>
                        }
                        else if(result.BuildDefinition == "aspnetcore-ci-official")
                        {
                            <span title="Internal Build" class="icofont-eye-blocked"></span>
                        }
                        else if(string.IsNullOrEmpty(result.BuildDefinition))
                        {
                            <span title="Build Unknown" class="icofont-question-circle"></span>
                        }

                        @if (QuarantineTracker.IsTestQuarantined(result))
                        {
                            <span title="Quarantined" class="symbol">☢</span>
                        }
                    </td>
                    <td>
                        <span title="@FormatBuildInfo(result, includeDate: true)">
                            @if (string.IsNullOrEmpty(result.BuildId))
                            {
                                @result.Finished.Humanize()
                            }
                            else
                            {
                                <a href="https://dev.azure.com/dnceng/@(result.AzDoProject)/_build/results?buildId=@(result.BuildId)&view=ms.vss-test-web.build-test-results-tab" target="_blank">
                                    @result.Finished.Humanize()
                                </a>
                            }
                        </span>
                    </td>
                    <td><span title="@result.Project">@result.Project</span></td>
                    <td><code title="@result.Type">@CompactNamespace(result.Type)</code></td>
                    <td><code title="@(result.Method)(@result.Arguments)">@(result.Method)(@result.Arguments)</code></td>
                </tr>
                <tr hidden="@(!state.IsExpanded)">
                    <td colspan="6">
                        <div class="card">
                            <div class="card-header">
                                <h5 title="@(result.Type).@(result.Method)(@result.Arguments)">
                                    <code>@(result.Type).@(result.Method)(@result.Arguments)</code>
                                </h5>
                                <div>
                                    @switch (result.Result)
                                    {
                                        case "Fail":<span class="badge badge-danger">❌ Failed</span> break;
                                        case "Skip": <span class="badge badge-secondary">➖ Skipped</span> break;
                                        case "Pass": <span class="badge badge-success">✔ Passed</span>break;
                                    }
                                    <BuildLink CssClass="badge badge-primary" BuildId="@result.BuildId" Project="@result.AzDoProject">@FormatBuildInfo(result, includeDate: false)</BuildLink>
                                    <span class="badge badge-secondary">@GetQueueIcon(result.QueueName) @result.QueueName</span>
                                    <TestHistoryLink CssClass="badge badge-info" Result="result">History <span class="icofont-external-link"></span></TestHistoryLink>
                                </div>
                            </div>
                            <div class="card-body">
                                <h6 class="card-title">@result.Project</h6>
                                <p class="card-text">Duration: @result.Duration</p>

                                @if (result.Result == "Fail")
                                {
                                    <p><button class="btn btn-primary" @onclick="@(_ => state.ToggleDetail())">Failure Details</button></p>
                                    <div class="card-deck collapse @(state.IsDetailExpanded ? "show" : null)">
                                        <CodeCard BackgroundColor="Color.Warning" Header="Message">@result.Message</CodeCard>
                                        <CodeCard BackgroundColor="Color.Warning" Header="Stack Trace">@result.StackTrace</CodeCard>
                                    </div>
                                }
                                else if (result.Result == "Skip")
                                {
                                    <p><button class="btn btn-primary" @onclick="@(_ => state.ToggleDetail())">Skip Reason</button></p>
                                    <div class="card card-body collapse @(state.IsDetailExpanded ? "show" : null)">
                                        @result.SkipReason
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    IReadOnlyList<RowState> _rows = Array.Empty<RowState>();

    [Parameter]
    public IEnumerable<TestResult>? Results
    {
        get => _rows.Select(r => r.Data);
        set => _rows = value.Select(t => new RowState(t)).ToList();
    }

    string FormatBuildInfo(TestResult result, bool includeDate)
    {
        var buildInfo = string.IsNullOrEmpty(result.BuildNumber) ?
            "unknown build" :
            $"{result.BuildDefinition}#{result.BuildNumber}";

        return includeDate ? $"{buildInfo} ({result.Finished:O})" : buildInfo;
    }

    string GetRowClasses(TestResult result)
    {
        if (QuarantineTracker.IsTestQuarantined(result))
        {
            return "table-secondary test-quarantined";
        }
        return "";
    }

    class RowState
    {
        public TestResult Data { get; set; }
        public bool IsExpanded { get; set; }
        public bool IsDetailExpanded { get; set; }

        public RowState(TestResult data)
        {
            Data = data;
        }

        public void Deconstruct(out TestResult data, out RowState state)
        {
            data = Data;
            state = this;
        }

        public void ToggleDetail()
        {
            IsDetailExpanded = !IsDetailExpanded;
        }

        public void ToggleExpanded()
        {
            IsExpanded = !IsExpanded;
        }
    }
}
